import { FileUpload } from "graphql-upload";
import { createWriteStream, ReadStream } from "fs";
import shortid from "shortid";
//import { copyResizedImage } from "./resizeImage";
import path from "path";
import { copyResizedImage } from "./resizeImage";
const uploadDir = __dirname + "../../../api/images";

/**
 * Stores file in the "images/" folder.
 */
const storeUpload = async (
  stream: ReadStream,
  imgFolder: string,
  filename: string
): Promise<string> => {
  return new Promise((resolve, reject) =>
    stream
      .pipe(createWriteStream(`${uploadDir}/${imgFolder}/${filename}`))
      .on("finish", () => resolve(filename))
      .on("error", (error: any) => {
        console.log("saving file error: ", error);
        return reject();
      })
  );
};

/**
 * @returns new image filename generated by shortid + filname.
 */
export const processUpload = async (
  imgFolder: string,
  upload: FileUpload,
  maxW?: number
): Promise<string> => {
  const { createReadStream, filename, mimetype } = await upload;
  // check file format
  if (!mimetype.includes("image")) {
    console.log("SERVER ERROR: \nWrong file format of file: ", filename);
    //return false;
  }

  // change filename
  const id = shortid.generate();
  const newFilename = `${id}-${filename}`;

  const stream = createReadStream();

  console.log("Saving to folder...");
  // save file to a folder
  const savedPath = await storeUpload(stream, imgFolder, newFilename);
  const savedFilename = path.basename(savedPath);
  //const filename = "bing.png";
  //console.log(filename);

  console.log("Resizing...");
  if (maxW) copyResizedImage(savedFilename, imgFolder, maxW);

  return savedPath;

  // save image url in the database
  //return recordFile({ id, filename, mimetype, encoding, path })
};
